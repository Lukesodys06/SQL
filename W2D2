--============================WEEK 2 DAY 2 ==============================--
---==========================KYUNG KWAN JANG ============================--

--==FULL OUTER JOIN ==--
--NATURAL JOIN?
SELECT S.NAME AS STUDENT_NAME, P.NAME AS PROF_NAME
  FROM STUDENT S, PROFESSOR P
 WHERE S.PROFNO = P.PROFNO(+)
 UNION
SELECT S.NAME AS STUDENT_NAME, P.NAME AS PROF_NAME
  FROM STUDENT S, PROFESSOR P
 WHERE S.PROFNO(+) = P.PROFNO;
 
 --==SELF JOIN==--
 SELECT * FROM DEPT2;
 
 SELECT D1.DNAME, D2.DNAME
   FROM DEPT2 D1, DEPT2 D2
  WHERE D1.PDEPT = D2.DCODE(+);
  
--EX) CH4 - 1
SELECT * FROM P_GRADE;
SELECT * FROM EMP2;

SELECT TRUNC((SYSDATE-BIRTHDAY)/365) FROM EMP2;

SELECT E.NAME, E.POSITION, P.S_PAY, P.E_PAY
  FROM EMP2 E, P_GRADE P
 WHERE E.POSITION = P.POSITION(+);
 
SELECT E.NAME, TRUNC((SYSDATE-E.BIRTHDAY)/365) AS AGE, E.POSITION, P.POSITION, P.S_PAY, P.E_PAY
  FROM EMP2 E, P_GRADE P
 WHERE TRUNC((SYSDATE-E.BIRTHDAY)/365) BETWEEN P.S_AGE(+) AND P.E_AGE(+);   -----------**** OUTER JOIN FOR Non-EQUI 
 
 --=====SUBQUERY======--
 --QUERY INSIDE OF QUERY => (SELECT...)
 SELECT ... (SELECT ...)            -- 스칼라 서브쿼리
   FROM (SELECT ...)                -- 인라인 뷰
  WHERE COLUME1 > (SELECT ...)  ;    -- 일반 서브퀴리 -- TYPICAL
  
 1) 일반 서브쿼리 : 상수 대신 변쉬의 사용; --  주 목적;
 -- ALLEN 의 연봉보다 높은 직원의 이름 출력;
 
SELECT SAL
  FROM EMP
 WHERE ENAME = 'ALLEN';
 
-- IF 'ALLEN'S SALARY CHANGES, YOU HAVE TO 
 
SELECT ENAME
  FROM EMP
 WHERE SAL > 1600;
 
SELECT ENAME
  FROM EMP
 WHERE SAL > (SELECT SAL
                FROM EMP
               WHERE ENAME = 'ALLEN') ;
               
1-1) 단일행 서브쿼리      ;        
--EX) EMP에서 S로 시작하는 직원보다 연봉이 높은 직원
SELECT ENAME
  FROM EMP
 WHERE SAL > (SELECT MAX(SAL)
                FROM EMP
               WHERE ENAME LIKE 'S%');               -- CTRL + L PART QURTY 

--EX 1.2) STUDENT TABLE에서 제1전공이 101번인 학과의 평균 몸무게보다 몸부게가 많은 학생글의 이름과 WEIGHT
SELECT NAME,
       WEIGHT
  FROM STUDENT
 WHERE WEIGHT >= (SELECT AVG(WEIGHT)
          FROM STUDENT
         WHERE DEPTNO1 = 101);

SELECT * FROM STUDENT;

SELECT AVG(WEIGHT)
  FROM STUDENT
 WHERE DEPTNO1 = 101;

--!!! Comparision WHERE 부분은 단일행 서브 쿼리
-- 연산자에 >, <, = 

1-2) 다중행 서브쿼리;
--다중행 쿼리에 연산자가 있음. -- IN, ALL(??), ANY(??)
-- ALL -> 최대값     EX) ALL(10,20) -> 20
-- ANY -> 최소값     EX) ANY(10, 20) -> 10
> ALL(10,20) : 20 보다 큰
> ANY(10,20) : 10 보다 큰
< ALL(10,20) : 10 보다 작은
< ANY(10,20) : 20 보다 작은;


SELECT ENAME
  FROM EMP
 WHERE SAL IN (SELECT SAL
                FROM EMP
               WHERE ENAME LIKE 'S%');

SELECT ENAME
  FROM EMP
 WHERE SAL = ANY(SELECT SAL
                   FROM EMP
                  WHERE ENAME LIKE 'S%');

SELECT ENAME
  FROM EMP
 WHERE SAL = ALL(SELECT SAL
                   FROM EMP
                  WHERE ENAME LIKE 'S%');
                  
--EX) EMP 에서 각 부서별 평균연봉과 평균 연봉보다 적게 받는 직원 이름, 부서, 연봉

SELECT E.ENAME, E.DEPTNO, E.SAL, TRUNC(E2.AVG_SAL), E2.DEPTNO
  FROM EMP E, (SELECT AVG(SAL) AS AVG_SAL, DEPTNO FROM EMP GROUP BY DEPTNO) E2
 WHERE E.DEPTNO = E2.DEPTNO AND E.SAL < AVG_SAL;
  

--A_TEACHER'S) 
SELECT AVG(SAL), DEPTNO FROM EMP GROUP BY DEPTNO;
 
1-3) 다중컬럼 서브쿼리;   ------- 최대 단점. 그룹별 대 소 비교가 불가능!!  >, < 거의 무조건 'IN'
-----!!!!!!!!!!!! EXAM QUESTION!!!!!!---------
-- IF JUST USE 'SAL',... 
SELECT *
  FROM EMP
 WHERE (DEPTNO, SAL) IN (SELECT DEPTNO,         ---- = 연사자 DOES NOT WORK!
                               MAX(SAL)
                          FROM EMP
                         GROUP BY DEPTNO);

SELECT DEPTNO,         ---- = 연사자 DOES NOT WORK!
                               MAX(SAL)
                          FROM EMP
                         GROUP BY DEPTNO;

2)  INLINE VIEW (인라인 뷰): 테이블 대체;  ----PERFORMANCE CAN BE IMPROVE TO MAKE SURE JOIN PROCESS IS EAISER FOR THE COMPUTER
-- 내가 JOIN...
-- 그룹별 대 소 비교는 인라인 뷰!

--EX) EMP 테이블에서 최대 연봉자에 대한 정보 출력
SELECT DEPTNO, MAX(SAL)     --- WHO EANRS THE MAX(SAL)??
  FROM EMP
 GROUP BY DEPTNO;
 
SELECT * FROM EMP;
SELECT E1.DEPTNO,
       E1.SAL,
       E1.ENAME
  FROM EMP E1,
       (SELECT DEPTNO,
               MAX(SAL) AS MAX_SAL      -- ALIAS IS MUST TO EXPRESS FUNCTIONAL COLUMN TO OTHER PLACES
          FROM EMP
         GROUP BY DEPTNO) E2       -- ALIAS IS MUST
 WHERE E1.SAL = E2.MAX_SAL
   and E1.DEPTNO = E2.DEPTNO;      ------ THERE WILL BE THE SOMEONE WITH THE SAME SAL BU WITH DIFFERENT DEPT. MAKE SURE TO CLARITIFY
 
 
--EX) SMITH와 같은 부서에 있는 사원의 이름과 직업을 출력하세요.
SELECT * FROM EMP;
SELECT * FROM DEPT;

SELECT DEPTNO
  FROM EMP
 WHERE ENAME = 'SMITH';

SELECT E.ENAME, E.JOB
  FROM EMP E
 WHERE E.DEPTNO = (SELECT DEPTNO
                     FROM EMP
                    WHERE ENAME = 'SMITH');
                    
--ex) proessor table 에서 각 학과별 최소연봉을 갖는 교수의 이름, 학과 이름, PAY를 출력

--INLINE VIEW)
SELECT * FROM PROFESSOR;
SELECT * FROM DEPARTMENT;

SELECT P.NAME, D.DNAME, P.PAY
  FROM PROFESSOR P, DEPARTMENT D, (SELECT DEPTNO, MIN(PAY) AS MIN_PAY FROM PROFESSOR GROUP BY DEPTNO) I
 WHERE P.PAY = I.MIN_PAY AND P.DEPTNO = D.DEPTNO;

--) 다중 컬럼
SELECT P.NAME, D.DNAME, P.PAY
  FROM PROFESSOR P, DEPARTMENT D
 WHERE P.DEPTNO = D.DEPTNO AND (P.DEPTNO, P.PAY) IN (SELECT DEPTNO, MIN(PAY) FROM PROFESSOR GROUP BY DEPTNO);
 
 
SELECT DEPTNO, MIN(PAY) FROM PROFESSOR GROUP BY DEPTNO;


SELECT *
  FROM PROFESSOR P1
 WHERE PAY IN (SELECT MIN(PAY) AS MIN_PAY
                 FROM PROFESSOR P2
                WHERE P1.DEPTNO = P2.DEPTNO     --상호연관 SUB QUERY!
                GROUP BY DEPTNO);
  ----
